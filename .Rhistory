myedit("myLabels.R")
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~carat|color*cut,data = diamonds, strip = FALSE,pch=20,xlab =myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data = diamonds,pch=20,xlab =myxlab,ylab=myylab,main=mymain)
sample(colors,10)
sample(colors(),10)
pal <- colorRamp(c('red','blue'))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c('red','blue'))
p1(2)
p1
p1(6)
0xcc
p2 <- colorRampPalette(c('red','yellow'))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?rgb
p3 <- colorRampPalette(c('blue','green'),alpha=0.5)
p3(5)
plot(x,y,pch=19,col = rgb(0,.5,.5))
plot(x,y,pch=19,col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3,'BuGn')
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(valcano,col=pal(20))
image('valcano',col=pal(20))
image(volcano,col=pal(20))
image(volcano,col=p1(20))
install.packages('ggplot2')
library(ggplot2)
str(mpg)
swirl()
require(swirl)
swirl()
str(mpg)
qplot(displ,hwy,data = mpg)
qplot(displ,hwy,data = mpg,color =drv)
qplot(displ,hwy,data = mpg,color =drv,geom = c('point','smooth'))
qplot(y=hwy,data=mpg,color=drv)
myhigh
qplot(drv,hwy,data=mpg,geom='boxplot')
qplot(drv,hwy,data=mpg,geom='boxplot',color = manufacturer)
qplot(hwy,data=mpg,fill=drv)
qplot(displ,hwy,data=mpg,facets=.~drv)
qplot(displ,hwy,data=mpg,facets=drv.~,binwidth=2)
qplot(hwy,data=mpg,facets=drv.~,binwidth=2)
qplot(hwy,data=mpg,facets=drv~.,binwidth=2)
qplot(displ,hwy,data=mpg,geom = c('point','smooth').facets = .~drv)
qplot(displ,hwy,data=mpg,geom = c('point','smooth'),facets = .~drv)
ggplot2(dpg,aes(displ,hwy) ->g
ggplot2(dpg,aes(displ,hwy)) ->g
ggplot2(dpg,aes(displ,hwy)) ->g
ggplot(dpg,aes(displ,hwy)) ->g
ggplot(mpg,aes(displ,hwy)) ->g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method ='lm')
g+geom_point()+geom_smooth(method ='lm')+facet_grid(.~drv)
g+geom_point()+geom_smooth(method ='lm')+facet_grid(.~drv)+ggtitle('Swirl Rules!')
g+geom_point(color = 'pink', size=4, alpha=1/2)+geom_smooth(method ='lm')+facet_grid(.~drv)+ggtitle('Swirl Rules!')
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size =4,alpha=1/2,aes(colr=drv))
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g+geopm_point(aes(color = drv))+labs(title = 'Swirl Rules!')+labs(x = 'Displacement',y='Hwy Mileage')
g+geom_point(aes(color = drv))+labs(title = 'Swirl Rules!')+labs(x = 'Displacement',y='Hwy Mileage')
g+geom_point(aes(color = drv),size =2,alpha=1/2)+ geom_smooth(size=4,linetype =3, method= 'lm',se=FALSE)
g+geom_point(aes(color = drv))+themevw(base_family = 'Times')
g+geom_point(aes(color = drv))+theme_bw(base_family = 'Times')
plot(myx,myy,type='l',ylim=c(-3,3))
ggplot(testdata,aes(x=myx,y=myy)) ->g
ggplot(testdat,aes(x=myx,y=myy)) ->g
g+geom_line()
g+geom_line(ylim(-3,3))
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(dataset, aes(x = displ,y=hwy,color = facotr(year)))
g <- ggplot(mpg, aes(x = displ,y=hwy,color = facotr(year)))
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(dry~cyl,margins = TRUE)
g+geom_point()+facet_grid(dry~cyl,margins = TRUE)
g+geom_point()
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = 'lm',se= FALSE,size= 2, color = 'black')
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = 'lm',se= FALSE,size= 2, color = 'black')+lab(x='Displacement', y = 'Highway Mileage', title = 'Swirl Rules!')
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method = 'lm',se= FALSE,size= 2, color = 'black')+labs(x='Displacement', y = 'Highway Mileage', title = 'Swirl Rules!')
str(diamonds)
qplot(price,data=diamonds)
qplot(diamonds$price)
range(diamonds$price)
qplot(price,data=diamonds),binwidth=18497/30
qplot(price,data=diamonds,binwidth=18497/30)
brk
counts
qplot(price,data=diamonds,binwidth=18479/30,fill=cut)
qplot(price,data=diamonds,binwidth=18497/30,fill=cut)
qplot(price,data=diamonds,geom='density')
qplot(price,data=diamonds,geom='density',color=cut)
qplot(carat,price,data=dataset)
qplot(carat,price,data=diamonds)
qplot(carat,price,data=diamonds,shape = cut)
qplot(carat,price,data=diamonds,color = cut)
qplot(carat,price,data=diamonds,color = cut,geom_smooth(method = 'lm'))
qplot(carat,price,data=diamonds,color = cut)+geom_smooth(method = 'lm')
qplot(carat,price,data=diamonds,color = cut,facets(.~cut))+geom_smooth(method = 'lm')
qplot(carat,price,data=diamonds,color = cut,facets=.~cut)+geom_smooth(method = 'lm')
g<- ggplot(diamonds,aes(x=depth,y=price))
summar(g)
summary(g)
g+geom_point(alpha=1/3)
cutpoints = quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints <- quantile(diamonds$carat,seq(0,1,length=4),na.rm=TRUE)
cutpoints
calss(cutpoints)
class(cutpoints)
diamonds$car2 <- cut(diamonds$carat,cutpoints)
summary(diamonds$car2)
g(diamonds,aes(x=depth,y=price)) ->g
ggplot(diamonds,aes(x=depth,y=price)) ->g
g+geom_point(alpha=1/2)+facet_grid(cut~car2)
g+geom_point(alpha=1/3)+facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha=1/3)+facet_grid(cut~car2)+geom_smooth(method='lm',size=3,color ='pink')
ggplot(diamonds,aes(carat,price))+geom_boxplot()+facet_grid(.~cut
)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
strsplit()
?strsplit
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv',destfile = 'data1.csv')
data <- read.csv('data1.csv')
str(data)
re <- lapply(data$sgtp,strsplit)
re[123]
re[[123]]
re <- lapply(data$sgtp,strsplit('wgtp'))
re <- lapply(data$sgtp,strsplit(split='wgtp'))
strsplit(names(data),split='wgtp') -> re
re[123]
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv',destfile = 'data2.csv')
data <- read.csv('data2.csv')
head(data)
str(data)
head(Data)
head(data)
as.numeric(sub(data$X.3,',',''))
mean(data$X.3,na.rm = TRUE)
head(data$X.3)
as.numeric(sub(',','',data$X.3))
head(data$X.3)
mean(data$X.3,na.rm = TRUE)
class(data$X.3)
data <- read.csv('data2.csv',stringsAsFactors = FALSE)
as.numeric(sub(',','',data$X.3))
class(data$X.3)
as.numeric(sub(',','',data$X.3))%>%mean(na.rm=TRUE)
mean(na.rm=TRUE)  %<% as.numeric(sub(',','',data$X.3))
as.numeric(sub(',','',data$X.3)) %>% mean(na.rm=TRUE)
require(dplyr)
as.numeric(sub(',','',data$X.3)) %>% mean(na.rm=TRUE)
View(data)
names(data)
data2 <- data[!is.na(data$Gross.domestic.product.2012),]
View(data2)
data2$Gross.domestic.product.2012[195]
data2$Gross.domestic.product.2012[195] == NULL
data2$Gross.domestic.product.2012[195] == NaN
data2$Gross.domestic.product.2012[195] == Na
data2$Gross.domestic.product.2012[195] == NA
(data2$Gross.domestic.product.2012[195]) == NA
(data2$Gross.domestic.product.2012[195])
(data2$Gross.domestic.product.2012[195]) == ''
data2 <- data[!(data$Gross.domestic.product.2012 == ''),]
as.numeric(sub(',','',data$X.3)) %>% mean(na.rm=TRUE)
View(data2)
View(data2)
as.numeric(sub(',','',data2$X.3)) %>% mean(na.rm=TRUE)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv',destfile = 'data2.csv',skip=4)
data <- read.csv('data2.csv',stringsAsFactors = FALSE)
data <- read.csv('data2.csv',stringsAsFactors = FALSE,,skip=4)
View(data)
data2 <- data[!(data$Gross.domestic.product.2012 == ''),]
data <- read.csv('data2.csv',stringsAsFactors = FALSE,,skip=4,header =TRUE)
names(data)
head(data)
as.numeric(sub(',','',data$X.4)) %>% mean(na.rm=TRUE)
data2 <- data[!(data$X.4 == ''),]
as.numeric(sub(',','',data2$X.4)) %>% mean(na.rm=TRUE)
as.numeric(sub(',','',data2$X.4)) ->re
re
head(Data)
head(data)
sub(',','',data$X.4[1])
as.numeric(data$X.4[1])
gsub(',','',data$X.4[1])
as.numeric(gsub(',','',data$X.4[1])
)
data2 <- data[!(data$X.4 == ''),]
as.numeric(gsub(',','',data2$X.4)) %>% mean(na.rm=TRUE)
View(data2)
data2 <- data[!(data$X.1 == ''),]
as.numeric(gsub(',','',data2$X.4)) %>% mean(na.rm=TRUE)
View(data2)
View(data2)
data2 <- data[!(data$X.1 == '')&!(data$X.4 == ''),]
as.numeric(gsub(',','',data2$X.4)) %>% mean(na.rm=TRUE)
grep("^United",X.3)
grep("^United",data$X.3)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv',destfile = 'data3.csv')
data3 <- read.csv('data2.csv',stringsAsFactors = FALSE)
View(data3)
View(data3)
View(data2)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv',destfile = 'data3.csv')
data3 <- read.csv('data2.csv',stringsAsFactors = FALSE)
View(data3)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv',destfile = 'data3.csv')
data3 <- read.csv('data3.csv',stringsAsFactors = FALSE)
View(data3)
merge(data2,data3,by.x = 'X', by.y='CountryCode') -> final
head(final,1)
View(final)
grep('.+ June.+', final$Special.Notes,ignore.case = TRUE) -> re
length(re)
grep('.+June.+', final$Special.Notes,ignore.case = TRUE) -> re
final$Special.Notes[re]
grep('.+end\:June.+', final$Special.Notes,ignore.case = TRUE) -> re
grep('.+end.*:.*June.+', final$Special.Notes,ignore.case = TRUE) -> re
grep('.+end : June.+', final$Special.Notes,ignore.case = TRUE) -> re
grep('.+end.*:.*June.+', final$Special.Notes,ignore.case = TRUE) -> re
final$Special.Notes[re]
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
require(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
require('quantmod')
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages('quantmod')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
head(sampleTimes)
class(sampleTimes[1])
st <- as.character(sampleTimes)
grep('2012',st)
length(grep('2012',st))
library(swirl)
swirl()
swirl::install_course('Getting and Cleaning Data')
swirl()
Sys.getlocale("LC_TIME")
swirl()
library(swirl)
swirl()
library(lubridate)
help(package = lubridate)
today()
today() -> this_day
this_day
year()
year(this_day)
wday(this_day)
wday(this_day,label=TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd('1989-05-17')
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd('1989 May 17')
ymd('March 12, 1975')
mdy('March 12, 1975')
dmy(25081985)
ymd('192012')
ymd('19201/2')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55).
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
update(this_moment,hours = 19, minutes = 26) -> this_moment
this_moment
nyc <- now(tz= "America/New_York")
nyc
nyc+days(2) -> depart
depart
update(hours = 17, minutes = 34) -> depart
update(depart,hours = 17, minutes = 34) -> depart
depart
arrive <- depart + hours(15)+ minutes(50)
?with_tz
with_tz(arrive, 'Asia/Hong_Kong')
with_tz(arrive, "Asia/Hong_Kong")
with_tz(arrive, "Asia/Hong_Kong") -> arrive
arrive
last_time <- mdy("June 17, 2008", tz= 'Singapore')
last_time
?interval
interval(last_time, arrive) ->how_long
as.period(how_long)
stopwatch()
setwd('E:\Rworking\Getting_and_Cleaning_data\Dataset')
setwd('E:\\Rworking\Getting_and_Cleaning_data\\Dataset')
setwd('E:\\Rworking\\Getting_and_Cleaning_data\\Dataset')
data <- read.lines('train/X_train.txt')
data <- readLines('train/X_train.txt')
str(data)
data <- read.table('train/X_train.txt')
View(data)
trainData <- read.table('train/X_train.txt')
trainLabel <- read.table('train/Y_train.txt')
testData <- read.table('test/X_test.txt')
testLabel <- read.table('test/Y_test.txt')
View(data)
rm('data')
trainLabel <- readLines('train/Y_train.txt')
testLabel <- readLines('test/Y_test.txt')
actLabel <- readLines('activity_labels.txt')
actLabel <- gsub('[0-9]','',actLabel)
sapply(trainLabel,function(actNum) actLabel[actNum])
trainLabel <- as.numeric(readLines('train/Y_train.txt'))
testLabel <-as.numeric(readLines('test/Y_test.txt'))
sapply(trainLabel,function(actNum) actLabel[actNum])
# prepare labels
# import subject info
trainSubject <- readLines('train/subject_train.txt')
testSubject <- readLines('test/subject_test.txt')
# import activity label-name correspondence
actLabel <- readLines('activity_labels.txt')
actLabel <- gsub('[0-9]','',actLabel)
# import train and test data labels (denoted by #)
trainLabel <- as.numeric(readLines('train/Y_train.txt'))
testLabel <-as.numeric(readLines('test/Y_test.txt'))
# using correspondence table to map acitivity numbers to names
trainLabel <- sapply(trainLabel,function(actNum) actLabel[actNum])
testLabel <- sapply(testLabel,function(actNum) actLabel[actNum])
# import train and test data
trainData <- read.table('train/X_train.txt',col.names = trainLabel)
testData <- read.table('test/X_test.txt',col.names = testLabel)
trainData['subjectID'] = trainSubject
testData['subjectID'] = testSubject
head(trainData)
trainData <- read.table('train/X_train.txt',col.names = as.factor(trainLabel))
str(as.factor(trainLabel))
features <- readLines('features.txt')
# import features info
features <- readLines('features.txt')
features <- gsub('[0-9*]','',features)
head(features)
features[342]
# import features info (strip number)
features <- readLines('features.txt')
features[342]
actLabel <- readLines('activity_labels.txt')
actLabel <- gsub('^[0-9]','',actLabel)
features[342]
features <- readLines('features.txt')
features <- gsub('^[0-9*]','',features)
features[342]
features <- readLines('features.txt')
features <- gsub('^[0-9]*','',features)
features[342]
# import train and test data
trainData <- read.table('train/X_train.txt',col.names = features )
testData <- read.table('test/X_test.txt',col.names = features)
trainData['subjectID'] = trainSubject
testData['subjectID'] = testSubject
names(trainData)
head(trainData)
data <- merge(trainData, testData)
data <- rbind(trainData, testData)
e one data set
fullData <- rbind(trainData, testData)
grep('mean|std',names(fullData))
meanAndStandardDeviation <- fullData[ ,grep('mean|std',names(fullData))]
names(meanAndStandardDeviation)
meanAndStandardDeviation <- fullData[ ,grep('mean|std',names(fullData))]
trainData['subjectID'] = trainSubject
testData['subjectID'] = testSubject
trainData['activity'] = trainLabel
testData['activity'] = testLabel
fullData <- rbind(trainData, testData)
# Extracts only the measurements on the mean and standard deviation for each measurement
meanAndStandardDeviation <- fullData[ ,grep('mean|std',names(fullData))]
group_by(fullData,subjectID,activity)
library(dplyr)
group_by(fullData,subjectID,activity)
group_by(fullData,subjectID,activity) -> pdata
summarise_each(pdata, funs(mean))
head(summarise_each(pdata, funs(mean)))
averageByGroup <- group_by(meanAndStandardDeviation,subjectID,activity) %>%
summarize_each(funs(mean))
names(meanAndStandardDeviation)
# Merges the training and the test sets to create one data set
fullData <- rbind(trainData, testData)
# Extracts only the measurements on the mean and standard deviation for each measurement
meanAndStandardDeviation <- fullData[ ,grep('mean|std',names(fullData))]
# From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
require(dplyr)
averageByGroup <- group_by(meanAndStandardDeviation,subjectID,activity) %>%
summarize_each(funs(mean))
meanAndStandardDeviation <- fullData[ ,grep('mean|std|subjectID|activity',names(fullData))]
require(dplyr)
averageByGroup <- group_by(meanAndStandardDeviation,subjectID,activity) %>%
summarize_each(funs(mean))
str(averageByGroup)
head(averageByGroup)
setwd('E:\\Rworking\\Getting_and_Cleaning_data\\Dataset')
rm(list = ls())
# preparations and data reading
# prepare labels
# import subject info
trainSubject <- readLines('train/subject_train.txt')
testSubject <- readLines('test/subject_test.txt')
# import features info (strip number)
features <- readLines('features.txt')
features <- gsub('^[0-9]*','',features)
# import activity label-name correspondence (strip number)
actLabel <- readLines('activity_labels.txt')
actLabel <- gsub('[0-9]','',actLabel)
# import train and test data labels (originally denoted by #)
trainLabel <- as.numeric(readLines('train/Y_train.txt'))
testLabel <-as.numeric(readLines('test/Y_test.txt'))
# using correspondence table to map acitivity numbers to names
trainLabel <- sapply(trainLabel,function(actNum) actLabel[actNum])
testLabel <- sapply(testLabel,function(actNum) actLabel[actNum])
# import train and test data
trainData <- read.table('train/X_train.txt',col.names = features, na.string = NA)
testData <- read.table('test/X_test.txt',col.names = features, na.string = NA)
# add subject ID and activity info
trainData['subjectID'] = trainSubject
testData['subjectID'] = testSubject
trainData['activity'] = trainLabel
testData['activity'] = testLabel
########################################################################
# statistics session
# 1.Merges the training and the test sets to create one data set
fullData <- rbind(trainData, testData)
# 2.Extracts only the measurements on the mean and standard deviation for each measurement
meanAndStandardDeviation <- fullData[ ,grep('mean|std|subjectID|activity',names(fullData))]
# 3,4 are guaranteed in praparation sessions
# 5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
require(dplyr)
# group data by subject ID and activity, then find mean for each group, store in a new variable averageByGroup
averageByGroup <- group_by(meanAndStandardDeviation,subjectID,activity) %>%
summarize_each(funs(mean))
View(averageByGroup)
source('E:/Rworking/Getting_and_Cleaning_data/Dataset/code/run_analysis.R')
# preparations and data reading
# prepare labels
# import subject info
trainSubject <- readLines('train/subject_train.txt')
testSubject <- readLines('test/subject_test.txt')
# import features info (strip number)
features <- readLines('features.txt')
features <- gsub('^[0-9]*','',features)
# import activity label-name correspondence (strip number)
actLabel <- readLines('activity_labels.txt')
actLabel <- gsub('[0-9]','',actLabel)
# import train and test data labels (originally denoted by #)
trainLabel <- as.numeric(readLines('train/Y_train.txt'))
testLabel <-as.numeric(readLines('test/Y_test.txt'))
# using correspondence table to map acitivity numbers to names
trainLabel <- sapply(trainLabel,function(actNum) actLabel[actNum])
testLabel <- sapply(testLabel,function(actNum) actLabel[actNum])
# import train and test data
trainData <- read.table('train/X_train.txt',col.names = features, na.string = NA)
testData <- read.table('test/X_test.txt',col.names = features, na.string = NA)
# add subject ID and activity info
trainData['subjectID'] = trainSubject
testData['subjectID'] = testSubject
trainData['activity'] = trainLabel
testData['activity'] = testLabel
########################################################################
# statistics session
# 1.Merges the training and the test sets to create one data set
fullData <- rbind(trainData, testData)
# 2.Extracts only the measurements on the mean and standard deviation for each measurement
meanAndStandardDeviation <- fullData[ ,grep('mean|std|subjectID|activity',names(fullData))]
# 3,4 are guaranteed in praparation sessions
# 5.From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
require(dplyr)
# group data by subject ID and activity, then find mean for each group, store in a new variable averageByGroup
averageByGroup <- group_by(meanAndStandardDeviation,subjectID,activity) %>%
summarize_each(funs(mean))
# export data set to a csv file
write.table(averageByGroup, file = 'averageByGroup.csv')
View(averageByGroup)
View(fullData)
View(averageByGroup)
names(averageByGroup)
source('E:/Rworking/Getting_and_Cleaning_data/Dataset/code/run_analysis.R')
